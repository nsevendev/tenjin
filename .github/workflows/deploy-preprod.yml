name: Deploy to Preprod

on:
  push:
    branches: [preprod]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create .env files from dist
        run: |
          # Créer les fichiers .env à partir des .env.dist
          find . -name "*.env.dist" -exec sh -c 'cp "$1" "${1%.dist}"' _ {} \;
          
          # Créer le fichier .env.test pour les tests backend
          if [ -d "back" ]; then
            echo "APP_ENV=test" > back/.env.test
            echo "VARIABLE_TEST=test" >> back/.env.test
          fi
          
      - name: Create Docker networks
        run: |
          # Créer le réseau traefik-nseven requis par docker-compose
          docker network create traefik-nseven || true

      - name: Start services in dev mode
        run: |
          # Lancer le projet en mode dev
          make up
          
          # Copie le fichier environment.dist et creer le fichier environment.ts
          cp app/src/environments/environment.dist app/src/environments/environment.ts
          
          # Attendre que les services soient prêts
          sleep 30
          
      - name: Run backend tests
        run: |
          # Lancer tous les tests backend
          make tav
          
      - name: Run frontend tests
        run: |
          # Lancer tous les tests frontend
          make tafc
          
      - name: Check logs on failure
        if: failure()
        run: |
          echo "=== APP Logs ==="
          make logs-app
          echo "=== API Logs ==="
          make logs-api
          echo "=== DB Logs ==="
          make logs-db
          
      - name: Cleanup
        if: always()
        run: |
          make down || true
          
  deploy:
    needs: test
    name: Deploy to Ionos Preprod
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          # Write SSH key with proper formatting
          printf '%s\n' "${{ secrets.IONOS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          
          # Debug: Check key format and size
          echo "SSH key file size:"
          wc -c ~/.ssh/id_rsa
          echo "SSH key first line:"
          head -1 ~/.ssh/id_rsa
          echo "SSH key last line:"
          tail -1 ~/.ssh/id_rsa
          
          # Test SSH key format
          ssh-keygen -l -f ~/.ssh/id_rsa
          
          # Add server to known hosts
          ssh-keyscan -H ${{ secrets.IONOS_HOST }} >> ~/.ssh/known_hosts
          
          # Test SSH connection with verbose output
          ssh -v -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.IONOS_USER }}@${{ secrets.IONOS_HOST }} "echo 'SSH connection successful'"
          
      - name: Deploy to server
        run: |
          ssh ${{ secrets.IONOS_USER }}@${{ secrets.IONOS_HOST }} << 'EOF'
            set -e
            
            # Navigate to project directory
            cd ~/projects/test/tenjin
            
            # Pull latest changes (safe even if already on preprod branch)
            git fetch origin
            git checkout preprod || git checkout -b preprod origin/preprod
            git pull origin preprod
          
          [ -f app/src/environments/environment.ts ] || cp app/src/environments/environment.dist app/src/environments/environment.ts
            
            # Deploy with Docker
            make down || true
            make upb
            
            # Verify deployment
            sleep 10
            docker compose --env-file .env -f docker/compose.preprod.yaml logs --tail=20 app
            
          EOF
          
      - name: Verify deployment
        run: |
          # Test if services are responding
          ssh ${{ secrets.IONOS_USER }}@${{ secrets.IONOS_HOST }} << 'EOF'
            curl -f https://tenjin.woopear.fr/health || echo "Frontend health check failed"
            curl -f https://tenjin-api.woopear.fr/health || echo "API health check failed"
          EOF
